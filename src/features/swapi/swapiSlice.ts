import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { getPeople } from "./swapiApi";
import { PeopleType } from "./swapiTypes";

export interface SwapiState {
  status: "idle" | "loading" | "failed";
  people?: PeopleType;
}

export const initialState: SwapiState = {
  status: "idle",
};

export const getPeopleAsync = createAsyncThunk<any, number>(
  "swapi/getPeople",
  async (page: number) => {
    return getPeople(page);
  }
);

export const swapiSlice = createSlice({
  name: "swapi",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /**
       * Getting an access token
       */
      .addCase(getPeopleAsync.pending, (state) => {
        return { ...state, status: "loading" };
      })
      .addCase(getPeopleAsync.fulfilled, (state, action) => {
        return { ...state, status: "loading", people: { ...action.payload } };
      })
      .addCase(getPeopleAsync.rejected, (state, action) => {
        return { ...state, status: "failed" };
      });
  },
});

export const selectSwapiPeople = (state: RootState) => state.swapi.people;

export default swapiSlice.reducer;
