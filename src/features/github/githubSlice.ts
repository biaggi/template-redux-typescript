import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { authSecondStep, getLoginUrl, getUser } from "./githubApi";
import { User, AccessToken } from "./githubTypes";


export interface GithubState {
  loginUrl?: string;
  status: "idle" | "loading" | "failed";
  accessToken?: AccessToken;
  user?: User;
}

export const initialState: GithubState = {
  status: "idle",
};

export const getLoginUrlAsync = createAsyncThunk<string, string>(
  "github/getLoginUrl",
  async (state: string) => {
    return getLoginUrl(state);
  }
);

export const getAuthSecondStepAsync = createAsyncThunk<
  AccessToken,
  { code: string; state: string }
>("github/getAuthSecondStep", async (params) => {
  return await authSecondStep(params.code);
});

export const getUserAsync = createAsyncThunk<User, void, { state: RootState }>(
  "github/getUser",
  async (params, thunkApi) => {
    const state = thunkApi.getState();
    const accessToken = state?.github?.accessToken?.access_token;
    if (accessToken) return await getUser(accessToken);
    thunkApi.rejectWithValue("");
  }
);

export const githubSlice = createSlice({
  name: "github",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /**
       * Creating an url
       */
      .addCase(getLoginUrlAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getLoginUrlAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loginUrl = action.payload;
      })
      /**
       * Getting an access token
       */
      .addCase(getAuthSecondStepAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAuthSecondStepAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.accessToken = action.payload;
      })
      .addCase(getAuthSecondStepAsync.rejected, (state, action) => {
        state.status = "failed";
      })
      /**
       * Getting an access token
       */
      .addCase(getUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.status = "loading";
        state.user = action.payload;
      })
      .addCase(getUserAsync.rejected, (state, action) => {
        state.status = "failed";
      });
  },
});

export const {} = githubSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectGithub = (state: RootState) => state.github;

export default githubSlice.reducer;
